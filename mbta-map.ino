// pins 2 through 13 are used for the LEDs
// pins 2, 3, 4, 5, 6, 7 are the anodes
// pins 8, 9, 10, 11, 12, 13 are the cathodes

constexpr bool DEBUG = false;

constexpr byte LED_OFF = 0;
constexpr byte LED_ON = 1;
constexpr byte LED_BLINK = 2;

constexpr int BUTTON_PIN = 14;
constexpr int DEBUG_PIN = 15;

constexpr unsigned int NO_STOP = 0xFFFF;

constexpr byte NUM_STATIONS = 18;
constexpr byte WEEKDAY_NUM_TRAINS = 37;
const unsigned int WEEKDAY_INBOUND[] PROGMEM = {NO_STOP, NO_STOP, NO_STOP, NO_STOP, 252, 252, 258, 258, 263, 263, 274, 274, 284, 284, 293, 293, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 298, 298, 303, 303, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 318, 318, 322, 322, 328, 328, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 315, 315, 322, 322, 325, 325, 330, 330, NO_STOP, NO_STOP, 335, 335, NO_STOP, NO_STOP, 344, 344, 348, 348, 354, 354, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 310, 310, 316, 316, NO_STOP, NO_STOP, 329, 329, 339, 339, 348, 348, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 353, 353, 358, 358, NO_STOP, NO_STOP, 363, 363, NO_STOP, NO_STOP, 374, 374, 378, 378, 384, 384, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 378, 378, 385, 385, 388, 388, 393, 393, 397, 397, 400, 400, NO_STOP, NO_STOP, 410, 410, 414, 414, 420, 420, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 360, 360, 366, 366, 371, 371, 382, 382, 392, 392, 401, 401, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 406, 406, 411, 411, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 427, 427, 431, 431, 437, 437, 362, 362, 376, 376, 391, 392, 398, 398, NO_STOP, NO_STOP, 411, 411, 421, 421, 430, 430, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 451, 451, 455, 455, 461, 461, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 435, 435, 442, 442, 445, 445, 450, 450, NO_STOP, NO_STOP, 455, 455, NO_STOP, NO_STOP, 467, 467, 471, 471, 477, 477, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 430, 430, 436, 436, 441, 441, 452, 452, 462, 462, 471, 471, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 476, 476, 481, 481, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 497, 497, 501, 501, 507, 507, 422, 422, 436, 436, 451, 452, 458, 458, NO_STOP, NO_STOP, 471, 471, 481, 481, 490, 490, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 510, 510, 514, 514, 520, 520, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 492, 492, 499, 499, 502, 502, 507, 507, NO_STOP, NO_STOP, 512, 512, NO_STOP, NO_STOP, 522, 522, 526, 526, 532, 532, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 488, 488, 494, 494, NO_STOP, NO_STOP, 507, 507, 517, 517, 526, 526, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 531, 531, 536, 536, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 552, 552, 556, 556, 562, 562, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 555, 555, 562, 562, 565, 565, 570, 570, NO_STOP, NO_STOP, 575, 575, NO_STOP, NO_STOP, 586, 586, 590, 590, 596, 596, 518, 518, 532, 532, 547, 548, 555, 555, NO_STOP, NO_STOP, 568, 568, 581, 581, 590, 590, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 595, 595, 600, 600, 604, 604, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 617, 617, 621, 621, 626, 626, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 615, 615, 622, 622, 625, 625, 630, 630, NO_STOP, NO_STOP, 635, 635, NO_STOP, NO_STOP, 644, 644, 648, 648, 653, 653, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 615, 615, 621, 621, NO_STOP, NO_STOP, 634, 634, 644, 644, 653, 653, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 658, 658, 663, 663, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 678, 678, 682, 682, 687, 687, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 680, 680, 687, 687, 690, 690, 695, 695, NO_STOP, NO_STOP, 700, 700, NO_STOP, NO_STOP, 709, 709, 713, 713, 718, 718, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 672, 672, 678, 678, NO_STOP, NO_STOP, 691, 691, 703, 703, 712, 712, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 717, 717, 722, 722, NO_STOP, NO_STOP, 727, 727, NO_STOP, NO_STOP, 740, 740, 744, 744, 749, 749, 717, 717, 731, 731, 746, 747, 753, 753, NO_STOP, NO_STOP, 766, 766, 776, 776, 785, 785, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 790, 790, 795, 795, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 810, 810, 814, 814, 819, 819, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 802, 802, 809, 809, 812, 812, 817, 817, NO_STOP, NO_STOP, 822, 822, NO_STOP, NO_STOP, 831, 831, 835, 835, 840, 840, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 795, 795, 801, 801, NO_STOP, NO_STOP, 814, 814, 824, 824, 833, 833, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 838, 838, 843, 843, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 860, 860, 864, 864, 869, 869, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 855, 855, 862, 862, 865, 865, 870, 870, NO_STOP, NO_STOP, 875, 875, NO_STOP, NO_STOP, 884, 884, 888, 888, 893, 893, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 850, 850, 856, 856, NO_STOP, NO_STOP, 870, 870, 880, 880, 889, 889, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 897, 897, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 912, 912, 916, 916, 921, 921, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 905, 905, 912, 912, 915, 915, 920, 920, NO_STOP, NO_STOP, 925, 925, NO_STOP, NO_STOP, 934, 934, 938, 938, 943, 943, 865, 865, 879, 879, 895, 896, 902, 902, NO_STOP, NO_STOP, 915, 915, 925, 925, 934, 934, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 939, 939, 944, 944, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 959, 959, 963, 963, 969, 969, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 965, 965, 972, 972, 975, 975, 980, 980, NO_STOP, NO_STOP, 985, 985, NO_STOP, NO_STOP, 994, 994, 998, 998, 1004, 1004, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 956, 956, 962, 962, NO_STOP, NO_STOP, 978, 978, 988, 988, 997, 997, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 1002, 1002, 1007, 1007, 1011, 1011, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 1024, 1024, 1028, 1028, 1034, 1034, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 1020, 1020, 1027, 1027, 1030, 1030, 1035, 1035, NO_STOP, NO_STOP, 1040, 1040, NO_STOP, NO_STOP, 1049, 1049, 1053, 1053, 1059, 1059, 995, 995, 1009, 1009, 1024, 1025, 1031, 1031, NO_STOP, NO_STOP, 1044, 1044, 1054, 1054, 1063, 1063, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 1068, 1068, 1073, 1073, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 1088, 1088, 1092, 1092, 1098, 1098, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 1080, 1080, 1087, 1087, 1090, 1090, 1095, 1095, NO_STOP, NO_STOP, 1100, 1100, NO_STOP, NO_STOP, 1109, 1109, 1113, 1113, 1119, 1119, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 1092, 1092, 1098, 1098, NO_STOP, NO_STOP, 1111, 1111, 1121, 1121, 1130, 1130, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 1135, 1135, 1140, 1140, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 1155, 1155, 1159, 1159, 1165, 1165, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 1158, 1158, 1165, 1165, 1168, 1168, 1173, 1173, NO_STOP, NO_STOP, 1178, 1178, NO_STOP, NO_STOP, 1187, 1187, 1191, 1191, 1196, 1196, 1126, 1126, 1140, 1140, 1155, 1156, 1162, 1162, NO_STOP, NO_STOP, 1175, 1175, 1185, 1185, 1194, 1194, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 1202, 1202, 1206, 1206, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 1219, 1219, 1223, 1223, 1228, 1228, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 1205, 1205, 1212, 1212, 1215, 1215, 1220, 1220, NO_STOP, NO_STOP, 1225, 1225, NO_STOP, NO_STOP, 1234, 1234, 1238, 1238, 1243, 1243, 1182, 1182, 1196, 1196, 1211, 1212, 1218, 1218, NO_STOP, NO_STOP, 1231, 1231, 1241, 1241, 1250, 1250, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 1255, 1255, 1260, 1260, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 1274, 1274, 1278, 1278, 1283, 1283, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 1318, 1318, 1325, 1325, 1328, 1328, 1333, 1333, 1337, 1337, 1339, 1339, NO_STOP, NO_STOP, 1349, 1349, 1353, 1353, 1358, 1358, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 1335, 1335, 1341, 1341, NO_STOP, NO_STOP, 1354, 1354, 1364, 1364, 1373, 1373, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 1378, 1378, 1383, 1383, NO_STOP, NO_STOP, 1388, 1388, NO_STOP, NO_STOP, 1399, 1399, 1403, 1403, 1408, 1408, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 1405, 1405, 1411, 1411, NO_STOP, NO_STOP, 1424, 1424, 1437, 1437, 1446, 1446, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 1451, 1451, 1456, 1456, 1460, 1460, 1462, 1462, NO_STOP, NO_STOP, 1474, 1474, 1478, 1478, 1483, 1483};
const unsigned int WEEKDAY_OUTBOUND[] PROGMEM = {260, 260, 265, 265, 268, 268, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 279, 279, 285, 285, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 291, 291, 299, 299, 307, 307, NO_STOP, NO_STOP, 316, 316, 330, 345, 360, 360, 378, 378, 325, 325, 330, 330, 333, 333, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 344, 344, 350, 350, 353, 353, 361, 361, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 390, 390, 395, 395, 398, 398, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 409, 409, 415, 415, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 421, 421, 429, 429, 437, 437, NO_STOP, NO_STOP, 446, 446, 463, 465, 480, 480, 495, 495, 420, 420, 425, 425, 428, 428, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 438, 438, 444, 444, 448, 448, 457, 457, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 450, 450, 455, 455, 458, 458, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 469, 469, 475, 475, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 481, 481, 489, 489, 497, 497, NO_STOP, NO_STOP, 506, 506, 520, 450, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 480, 480, 485, 485, 488, 488, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 498, 498, 504, 504, 507, 507, 517, 517, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 505, 505, 510, 510, 513, 513, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 524, 524, 530, 530, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 536, 536, 544, 544, 552, 552, NO_STOP, NO_STOP, 561, 561, 575, 505, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 537, 537, 542, 542, 545, 545, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 555, 555, 561, 561, 568, 568, 577, 577, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 565, 565, 570, 570, 573, 573, NO_STOP, NO_STOP, 581, 581, NO_STOP, NO_STOP, 587, 587, 593, 593, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 599, 599, 607, 607, 615, 615, NO_STOP, NO_STOP, 624, 624, 636, 637, 652, 652, 673, 673, 602, 602, 607, 607, 610, 610, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 621, 621, 627, 627, 630, 630, 638, 638, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 625, 625, 630, 630, 633, 633, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 644, 644, 650, 650, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 656, 656, 664, 664, 672, 672, NO_STOP, NO_STOP, 681, 681, 695, 625, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 678, 678, 683, 683, 686, 686, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 697, 697, 703, 703, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 709, 709, 717, 717, 725, 725, 735, 735, 739, 739, 753, 678, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 1440, 1440, 1445, 1445, 1448, 1448, NO_STOP, NO_STOP, 1456, 1456, 1458, 1458, 1462, 1462, 1468, 1468, 1471, 1471, 1479, 1479, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 1460, 1460, 1465, 1465, 1468, 1468, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 1479, 1479, 1485, 1485, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 1491, 1491, 1499, 1499, 1507, 1507, NO_STOP, NO_STOP, 1516, 1516, 1528, 1530, 1545, 1545, 1565, 1565, 785, 785, 790, 790, 793, 793, NO_STOP, NO_STOP, 801, 801, NO_STOP, NO_STOP, 806, 806, 812, 812, 815, 815, 823, 823, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 800, 800, 805, 805, 808, 808, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 819, 819, 825, 825, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 831, 831, 839, 839, 847, 847, NO_STOP, NO_STOP, 856, 856, 868, 800, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 845, 845, 850, 850, 853, 853, NO_STOP, NO_STOP, 861, 861, NO_STOP, NO_STOP, 866, 866, 872, 872, 875, 875, 883, 883, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 860, 860, 865, 865, 868, 868, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 879, 879, 885, 885, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 891, 891, 899, 899, 907, 907, 914, 914, 918, 918, 929, 930, 944, 944, 964, 964, 895, 895, 900, 900, 903, 903, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 914, 914, 920, 920, 924, 924, 934, 934, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 920, 920, 925, 925, 928, 928, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 939, 939, 945, 945, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 951, 951, 959, 959, 967, 967, NO_STOP, NO_STOP, 976, 976, 990, 920, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 952, 952, 957, 957, 961, 961, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 977, 977, 985, 985, 994, 994, 1004, 1004, 1008, 1008, 1020, 1021, 1035, 1035, 1055, 1055, 960, 960, 965, 965, 968, 968, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 979, 979, 985, 985, 988, 988, 999, 999, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 980, 980, 985, 985, 988, 988, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 999, 999, 1005, 1005, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 1011, 1011, 1019, 1019, 1027, 1027, NO_STOP, NO_STOP, 1036, 1036, 1051, 980, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 1012, 1012, 1017, 1017, 1021, 1021, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 1037, 1037, 1045, 1045, 1054, 1054, NO_STOP, NO_STOP, 1063, 1063, 1072, 1073, 1087, 1087, 1113, 1113, 1020, 1020, 1025, 1025, 1028, 1028, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 1039, 1039, 1045, 1045, 1049, 1049, 1060, 1060, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 1057, 1057, 1062, 1062, 1066, 1066, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 1077, 1077, 1083, 1083, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 1089, 1089, 1098, 1098, 1108, 1108, 1119, 1119, 1123, 1123, 1134, 1135, 1150, 1150, 1169, 1169, 1072, 1072, 1077, 1077, 1080, 1080, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 1091, 1091, 1097, 1097, 1101, 1101, 1111, 1111, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 1102, 1102, 1107, 1107, 1110, 1110, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 1121, 1121, 1127, 1127, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 1133, 1133, 1141, 1141, 1149, 1149, NO_STOP, NO_STOP, 1161, 1161, 1176, 1102, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 1145, 1145, 1150, 1150, 1153, 1153, NO_STOP, NO_STOP, 1161, 1161, NO_STOP, NO_STOP, 1166, 1166, 1172, 1172, 1175, 1175, 1184, 1184, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 1158, 1158, 1163, 1163, 1166, 1166, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 1177, 1177, 1181, 1181, 1187, 1187, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 1193, 1193, 1201, 1201, 1209, 1209, NO_STOP, NO_STOP, 1221, 1221, 1233, 1158, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 1200, 1200, 1205, 1205, 1208, 1208, NO_STOP, NO_STOP, 1216, 1216, NO_STOP, NO_STOP, 1221, 1221, 1227, 1227, 1230, 1230, 1238, 1238, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 1235, 1235, 1240, 1240, 1243, 1243, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 1254, 1254, 1260, 1260, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 1266, 1266, 1274, 1274, 1282, 1282, NO_STOP, NO_STOP, 1291, 1291, 1305, 1235, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 1260, 1260, 1265, 1265, 1268, 1268, NO_STOP, NO_STOP, 1276, 1276, 1278, 1278, 1282, 1282, 1288, 1288, 1291, 1291, 1299, 1299, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 1295, 1295, 1300, 1300, 1303, 1303, NO_STOP, NO_STOP, 1311, 1311, 1313, 1313, 1317, 1317, 1323, 1323, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 1329, 1329, 1337, 1337, 1345, 1345, NO_STOP, NO_STOP, 1354, 1354, 1371, 1295, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 1365, 1365, 1370, 1370, 1373, 1373, 1378, 1378, 1383, 1383, NO_STOP, NO_STOP, 1388, 1388, 1394, 1394, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 1400, 1400, 1408, 1408, 1416, 1416, NO_STOP, NO_STOP, 1425, 1425, 1441, 1365, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 1385, 1385, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 1417, 1417, 1423, 1423, 1426, 1426, 1435, 1435, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 1435, 1435, 1440, 1440, 1443, 1443, 1448, 1448, 1453, 1453, 1455, 1455, 1459, 1459, 1465, 1465, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 1471, 1471, 1479, 1479, 1487, 1487, NO_STOP, NO_STOP, 1496, 1496, 1512, 1435, NO_STOP, NO_STOP, NO_STOP, NO_STOP};

constexpr byte WEEKEND_NUM_TRAINS = 10;
const unsigned int WEEKEND_INBOUND[] PROGMEM = {NO_STOP, NO_STOP, NO_STOP, NO_STOP, 315, 315, 321, 321, NO_STOP, NO_STOP, 333, 333, 343, 343, 352, 352, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 357, 357, 363, 363, 367, 367, 370, 370, NO_STOP, NO_STOP, 381, 381, 385, 385, 390, 390, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 495, 495, 501, 501, NO_STOP, NO_STOP, 513, 513, 523, 523, 532, 532, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 537, 537, 543, 543, 547, 547, 550, 550, NO_STOP, NO_STOP, 561, 561, 565, 565, 570, 570, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 585, 585, 591, 591, NO_STOP, NO_STOP, 603, 603, 613, 613, 622, 622, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 627, 627, 633, 633, 637, 637, 640, 640, NO_STOP, NO_STOP, 651, 651, 655, 655, 660, 660, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 705, 705, 711, 711, NO_STOP, NO_STOP, 723, 723, 733, 733, 742, 742, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 747, 747, 753, 753, 757, 757, 760, 760, NO_STOP, NO_STOP, 771, 771, 775, 775, 780, 780, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 825, 825, 831, 831, NO_STOP, NO_STOP, 843, 843, 853, 853, 862, 862, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 867, 867, 873, 873, 877, 877, 880, 880, NO_STOP, NO_STOP, 891, 891, 895, 895, 900, 900, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 945, 945, 951, 951, NO_STOP, NO_STOP, 963, 963, 973, 973, 982, 982, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 987, 987, 993, 993, 997, 997, 1000, 1000, NO_STOP, NO_STOP, 1011, 1011, 1015, 1015, 1020, 1020, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 1075, 1075, 1081, 1081, NO_STOP, NO_STOP, 1093, 1093, 1103, 1103, 1112, 1112, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 1117, 1117, 1123, 1123, 1127, 1127, 1130, 1130, NO_STOP, NO_STOP, 1141, 1141, 1145, 1145, 1150, 1150, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 1195, 1195, 1201, 1201, NO_STOP, NO_STOP, 1213, 1213, 1223, 1223, 1232, 1232, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 1237, 1237, 1243, 1243, 1247, 1247, 1250, 1250, NO_STOP, NO_STOP, 1261, 1261, 1265, 1265, 1270, 1270, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 1285, 1285, 1291, 1291, NO_STOP, NO_STOP, 1303, 1303, 1313, 1313, 1322, 1322, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 1327, 1327, 1333, 1333, 1337, 1337, 1340, 1340, NO_STOP, NO_STOP, 1351, 1351, 1355, 1355, 1360, 1360, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 1405, 1405, 1411, 1411, NO_STOP, NO_STOP, 1423, 1423, 1433, 1433, 1442, 1442, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 1447, 1447, 1453, 1453, 1457, 1457, 1460, 1460, NO_STOP, NO_STOP, 1471, 1471, 1475, 1475, 1480, 1480};
const unsigned int WEEKEND_OUTBOUND[] PROGMEM = {405, 405, 410, 410, 413, 413, NO_STOP, NO_STOP, 421, 421, 424, 424, 428, 428, 434, 434, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 439, 439, 447, 447, 457, 457, NO_STOP, NO_STOP, 466, 466, 478, 478, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 475, 475, 480, 480, 483, 483, NO_STOP, NO_STOP, 491, 491, 494, 494, 498, 498, 504, 504, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 509, 509, 517, 517, 527, 527, NO_STOP, NO_STOP, 539, 539, 551, 551, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 615, 615, 620, 620, 623, 623, NO_STOP, NO_STOP, 631, 631, 634, 634, 638, 638, 644, 644, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 649, 649, 657, 657, 667, 667, NO_STOP, NO_STOP, 676, 676, 688, 688, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 1455, 1455, 1460, 1460, 1463, 1463, NO_STOP, NO_STOP, 1471, 1471, 1474, 1474, 1478, 1478, 1484, 1484, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 1489, 1489, 1497, 1497, 1507, 1507, NO_STOP, NO_STOP, 1516, 1516, 1528, 1528, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 855, 855, 860, 860, 863, 863, NO_STOP, NO_STOP, 871, 871, 874, 874, 878, 878, 884, 884, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 889, 889, 897, 897, 907, 907, NO_STOP, NO_STOP, 916, 916, 928, 928, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 945, 945, 950, 950, 953, 953, NO_STOP, NO_STOP, 961, 961, 964, 964, 968, 968, 974, 974, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 979, 979, 987, 987, 997, 997, NO_STOP, NO_STOP, 1006, 1006, 1021, 1021, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 1065, 1065, 1070, 1070, 1073, 1073, NO_STOP, NO_STOP, 1081, 1081, 1084, 1084, 1088, 1088, 1094, 1094, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 1099, 1099, 1107, 1107, 1117, 1117, NO_STOP, NO_STOP, 1126, 1126, 1138, 1138, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 1195, 1195, 1200, 1200, 1203, 1203, NO_STOP, NO_STOP, 1211, 1211, 1214, 1214, 1218, 1218, 1224, 1224, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 1229, 1229, 1237, 1237, 1247, 1247, NO_STOP, NO_STOP, 1256, 1256, 1268, 1268, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 1315, 1315, 1320, 1320, 1323, 1323, NO_STOP, NO_STOP, 1331, 1331, 1334, 1334, 1338, 1338, 1344, 1344, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 1349, 1349, 1357, 1357, 1367, 1367, NO_STOP, NO_STOP, 1376, 1376, 1388, 1388, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 1435, 1435, 1440, 1440, 1443, 1443, NO_STOP, NO_STOP, 1451, 1451, 1454, 1454, 1458, 1458, 1464, 1464, NO_STOP, NO_STOP, NO_STOP, NO_STOP, 1469, 1469, 1477, 1477, 1487, 1487, NO_STOP, NO_STOP, 1496, 1496, 1508, 1508, NO_STOP, NO_STOP, NO_STOP, NO_STOP};

inline void read_station(unsigned int *arrival, unsigned int *departure,
                         const unsigned int *timetable, byte train_i, byte station_i) {
  const unsigned int *const p_arrival = timetable + (train_i * NUM_STATIONS + station_i) * 2;
  *arrival = pgm_read_word_near(p_arrival);
  *departure = pgm_read_word_near(p_arrival + 1);
}

char day_of_week = 1; // 7 represents Sunday
int minute_of_day = 180; // resets at 3am (180 <= minute_of_day < 1620)
unsigned int ms_of_minute = 0; // no more than 60000
unsigned long time_last_updated = 0;

constexpr byte NUM_GROUPS = 6;
constexpr byte LEDS_PER_GROUP = 6;
constexpr byte NUM_LEDS = NUM_GROUPS * LEDS_PER_GROUP;
volatile byte led_state[NUM_LEDS];
volatile byte led_blink_phase = 0;
volatile int led_blink_counter = 0;
volatile byte current_group = 0;
volatile bool leds_active = true;

inline void update_time() {
  unsigned long time_now = millis();
  unsigned long time_elapsed = time_now - time_last_updated;
  ms_of_minute += time_elapsed;
  if (ms_of_minute >= 60000u) {
    ms_of_minute -= 60000u;
    minute_of_day += 1;
  }
  if (minute_of_day >= 1620) {
    minute_of_day -= 1440;
    day_of_week += 1;
  }
  if (day_of_week > 7) {
    day_of_week -= 7;
  }
  time_last_updated = time_now;
}

inline void input_time() {
  while (digitalRead(BUTTON_PIN) != LOW) {}
  digitalWrite(13, HIGH);
  delay(100);
  digitalWrite(13, LOW);
  delay(900);
  unsigned int bit_buffer = 0;
  for (int i = 0; i < 14; i++) { // read 14 bits
    bit_buffer <<= 1;
    if (digitalRead(BUTTON_PIN) == LOW) { // Button is pressed
      bit_buffer |= 1;
    }
    // flash LED to indicate bit read
    digitalWrite(13, HIGH);
    delay(100);
    digitalWrite(13, LOW);
    delay(900);
  }
  // upper 3 bits correspond to day of week
  day_of_week = bit_buffer >> 11;
  // lower 11 bits correspond to minute of day
  minute_of_day = bit_buffer & 0x7FF;
  time_last_updated = millis();
}

void setup() {
  for (int i = 2; i <= 13; i++) {
    pinMode(i, OUTPUT);
  }
  pinMode(BUTTON_PIN, INPUT_PULLUP);
  if constexpr (DEBUG) {
    pinMode(DEBUG_PIN, OUTPUT);
  }

  TCCR1A = 0;
  TCCR1B = 0;
  TCNT1 = 64911; // 65536 - 625
  TCCR1B |= (1 << CS10) | (1 << CS11); // prescaler = 1/64
  TIMSK1 |= (1 << TOIE1);

  for (byte led_to_light = 0; led_to_light <= NUM_LEDS; led_to_light++) {
    for (byte i = 0; i < NUM_LEDS; i++) {
      if (i == led_to_light) {
        led_state[i] = LED_ON;
      } else {
        led_state[i] = LED_OFF;
      }
    }
    delay(100);
  }

  leds_active = false;
  for (int i = 8; i <= 13; i++) {
    digitalWrite(i, LOW);
    pinMode(i, OUTPUT);
  }
  do {
    input_time();
  } while (day_of_week < 1 || day_of_week > 7 || minute_of_day < 180 || minute_of_day >= 1620);
  for (int i = 8; i <= 13; i++) {
    pinMode(i, INPUT);
    digitalWrite(i, HIGH);
  }
  leds_active = true;

  if constexpr (DEBUG) {
    Serial.begin(9600);
    Serial.print(F("Day of week: "));
    Serial.println((int)day_of_week);
    Serial.print(F("Minute of day: "));
    Serial.println(minute_of_day);
    Serial.print(F("Time last updated: "));
    Serial.println(time_last_updated);
  }
}

inline byte group_to_cathode(byte group) {
  return group + 8;
}

ISR(TIMER1_OVF_vect) {
  TCNT1 = 64911; // 65536 - 625
  if constexpr (DEBUG) {
    digitalWrite(DEBUG_PIN, HIGH);
  }

  if (leds_active) {
    led_blink_counter++;
    if (led_blink_counter >= 200) {
      led_blink_phase = 1 - led_blink_phase;
      led_blink_counter = 0;
    }

    byte previous_cathode = group_to_cathode(current_group);
    // Move to next LED group
    current_group++;
    if (current_group >= NUM_GROUPS) {
      current_group -= NUM_GROUPS;
    }
    byte now_cathode = group_to_cathode(current_group);

    byte anode_assignments = 0;
    for (byte i = 0; i < LEDS_PER_GROUP; i++) {
      switch (led_state[current_group * LEDS_PER_GROUP + i]) {
        case LED_OFF:
          break;
        case LED_ON:
          anode_assignments |= (1 << (i + 2));
          break;
        case LED_BLINK:
          anode_assignments |= (led_blink_phase << (i + 2));
          break;
      }
    }
    PORTD &= 3; // Set all anode pins to LOW
    pinMode(previous_cathode, INPUT);
    digitalWrite(previous_cathode, HIGH);
    digitalWrite(now_cathode, LOW);
    pinMode(now_cathode, OUTPUT);
    PORTD |= anode_assignments;

    if constexpr (DEBUG) {
      digitalWrite(DEBUG_PIN, LOW);
    }
  }
}

inline byte station_to_led(byte station_i, bool is_outbound) {
  if (is_outbound) {
    return station_i * 2;
  }
  return (NUM_STATIONS - station_i) * 2 - 1;
}

void write_trains_to_buffer(byte *led_buffer, const unsigned int *table_to_use, byte num_trains, bool is_outbound) {
  for (byte train_i = 0; train_i < num_trains; train_i++) {
    bool train_is_active = false;
    for (byte station_i = 0; station_i < NUM_STATIONS; station_i++) {
      unsigned int arrival_time, departure_time;
      read_station(&arrival_time, &departure_time, table_to_use, train_i, station_i);
      if (arrival_time == NO_STOP) {
        continue;
      }
      if (minute_of_day <= departure_time) {
        // Train has not yet left station
        if (minute_of_day >= arrival_time) { // Has train arrived at station?
          // Train is currently at station
          led_buffer[station_to_led(station_i, is_outbound)] = LED_ON;
          break;
        }
        if (!train_is_active) {
          break; // Train hasn't yet arrived at its first stop
        }
        // Train is approaching station
        led_buffer[station_to_led(station_i, is_outbound)] = LED_BLINK;
        break;
      }
      // Train has already passed this station
      train_is_active = true;
    }
  }
}

void loop() {
  update_time();
  byte led_buffer[NUM_LEDS] = {};
  if (day_of_week <= 5) {
    write_trains_to_buffer(led_buffer, WEEKDAY_OUTBOUND, WEEKDAY_NUM_TRAINS, true);
    write_trains_to_buffer(led_buffer, WEEKDAY_INBOUND, WEEKDAY_NUM_TRAINS, false);
  } else {
    write_trains_to_buffer(led_buffer, WEEKEND_OUTBOUND, WEEKEND_NUM_TRAINS, true);
    write_trains_to_buffer(led_buffer, WEEKEND_INBOUND, WEEKEND_NUM_TRAINS, false);
  }
  for (byte i = 0; i < NUM_LEDS; i++) {
    led_state[i] = led_buffer[i];
  }
  if constexpr (DEBUG) {
    Serial.print(F("Day of week: "));
    Serial.println((int)day_of_week);
    Serial.print(F("Minute of day: "));
    Serial.println(minute_of_day);
    Serial.print(F("Time last updated: "));
    Serial.println(time_last_updated);
  }
}
